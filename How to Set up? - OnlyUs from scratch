Hello


#This guide will take you step by step, explaining every single file and folder you need to create to make OnluUS.

##📂 Step 1: Create Project Folder
Open your computer’s file explorer (Finder on Mac / File Explorer on Windows).

Create a new folder called onlyus (this will be our main project folder).

Open a terminal (Command Prompt / PowerShell / VS Code Terminal).

⚙️ Step 2: Set Up the Backend (Node.js + Socket.io)
---------------------------------------------------------------------------------------------
##📁 Create the Backend Folder
In the terminal, run:

1.cd onlyus
2.mkdir backend
3.cd backend
(This creates and moves into the backend folder.)


##📝 Initialize Node.js Project
Run: npm init -y
(This creates a package.json file.)

##📦 Install Required Packages
Run:
1.npm install express cors socket.io
2.npm install nodemon --save-dev
(This installs the necessary backend libraries.)

##📝 Update package.json - Add these scripts:
"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
}


##📄 Create server.js (Main Backend File)
1.Inside /backend, create a new file called server.js.
2.Open server.js in a code editor (VS Code, Sublime, etc.).
Paste this code:
---------------------------------------------------------------------------------------------

const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');

const app = express();
app.use(cors());

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

io.on('connection', (socket) => {
  console.log(`User connected: ${socket.id}`);
  
  // Handle when users want to find a match
  socket.on('find-match', (data) => {
    const { matchType, interests } = data;
    
    // Create user object
    const user = {
      socketId: socket.id,
      interests: interests || []
    };
    
    // Add user to connected users map
    connectedUsers.set(socket.id, { matchType, currentPartner: null });
    
    let match = null;
    
    // Find match based on match type
    if (matchType === 'interests') {
      match = findInterestMatch(user);
      
      if (!match) {
        // No match found, add to waiting list
        waitingUsers.interests.push(user);
        console.log(`User ${socket.id} added to interests waiting room`);
      }
    } else {
      // Random matching
      match = findRandomMatch(user);
      
      if (!match) {
        // No match found, add to waiting list
        waitingUsers.random.push(user);
        console.log(`User ${socket.id} added to random waiting room`);
      }
    }
    
    // If match found, establish connection
    if (match) {
      console.log(`Matched users: ${socket.id} and ${match.socketId}`);
      
      // Update connected users map with partner info
      connectedUsers.get(socket.id).currentPartner = match.socketId;
      
      if (connectedUsers.has(match.socketId)) {
        connectedUsers.get(match.socketId).currentPartner = socket.id;
      }
      
      // Notify both users of the match
      socket.emit('matched', { partnerId: match.socketId });
      io.to(match.socketId).emit('matched', { partnerId: socket.id });
    }
  });
  
  // Handle WebRTC signaling for offers
  socket.on('offer', (offer) => {
    const userData = connectedUsers.get(socket.id);
    if (userData && userData.currentPartner) {
      io.to(userData.currentPartner).emit('offer', offer);
    }
  });
  
  // Handle WebRTC signaling for answers
  socket.on('answer', (answer) => {
    const userData = connectedUsers.get(socket.id);
    if (userData && userData.currentPartner) {
      io.to(userData.currentPartner).emit('answer', answer);
    }
  });
  
  // Handle WebRTC ICE candidates
  socket.on('ice-candidate', (candidate) => {
    const userData = connectedUsers.get(socket.id);
    if (userData && userData.currentPartner) {
      io.to(userData.currentPartner).emit('ice-candidate', candidate);
    }
  });
  
  // Handle chat messages
  socket.on('chat-message', (message) => {
    const userData = connectedUsers.get(socket.id);
    if (userData && userData.currentPartner) {
      io.to(userData.currentPartner).emit('chat-message', message);
    }
  });
  
  // Handle when users want to find a new match
  socket.on('next-match', () => {
    const userData = connectedUsers.get(socket.id);
    
    if (userData && userData.currentPartner) {
      // Notify partner that user disconnected
      io.to(userData.currentPartner).emit('user-disconnected');
      
      // Update partner's data
      if (connectedUsers.has(userData.currentPartner)) {
        connectedUsers.get(userData.currentPartner).currentPartner = null;
      }
      
      // Update user's data
      userData.currentPartner = null;
    }
  });
  
  // Handle user disconnect
  socket.on('disconnect', () => {
    console.log(`User disconnected: ${socket.id}`);
    
    // Notify partner if exists
    const userData = connectedUsers.get(socket.id);
    if (userData && userData.currentPartner) {
      io.to(userData.currentPartner).emit('user-disconnected');
      
      // Update partner's data
      if (connectedUsers.has(userData.currentPartner)) {
        connectedUsers.get(userData.currentPartner).currentPartner = null;
      }
    }
    
    // Remove user from waiting rooms
    waitingUsers.random = waitingUsers.random.filter(
      user => user.socketId !== socket.id
    );
    
    waitingUsers.interests = waitingUsers.interests.filter(
      user => user.socketId !== socket.id
    );
    
    // Remove user from connected users map
    connectedUsers.delete(socket.id);
  });
});

// Routes
app.get('/', (req, res) => {
  res.send('OnlyUs API is running');
});

// Start server
const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
// Waiting room for users looking for matches
const waitingUsers = {
  random: [],
  interests: []
};

// Map of connected users and their socket IDs
const connectedUsers = new Map();

// Match users based on interests
function findInterestMatch(user) {
  const { socketId, interests } = user;
  
  // Check for users with at least one matching interest
  for (let i = 0; i < waitingUsers.interests.length; i++) {
    const waitingUser = waitingUsers.interests[i];
    
    // Skip if it's the same user
    if (waitingUser.socketId === socketId) continue;
    
    // Check for common interests
    const commonInterests = waitingUser.interests.filter(interest => 
      interests.includes(interest)
    );
    
    if (commonInterests.length > 0) {
      // Remove matched user from waiting list
      waitingUsers.interests.splice(i, 1);
      return waitingUser;
    }
  }
  
  return null;
}

// Match users randomly
function findRandomMatch(user) {
  const { socketId } = user;
  
  // Find any user that's not self
  for (let i = 0; i < waitingUsers.random.length; i++) {
    const waitingUser = waitingUsers.random[i];
    
    // Skip if it's the same user
    if (waitingUser.socketId === socketId) continue;
    
    // Remove matched user from waiting list
    waitingUsers.random.splice(i, 1);
    return waitingUser;
  }
  
  return null;
}
---------------------------------------------------------------------------------------------







#🖥️ Step 3: Set Up the Frontend (React)
##📁 Create the Frontend App
Open a new terminal (keep the backend running).

Run:
1.cd ..  # Go back to /onlyus
2.npx create-react-app frontend
3.cd frontend
(This creates a React app inside /frontend.)

##📦 Install Frontend Dependencies
Run: npm install react-router-dom socket.io-client
(This adds routing and WebSocket support.)

##📄 Modify src/App.js
Open /frontend/src/App.js and replace its content with:
---------------------------------------------------------------------------------------------
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Home from './components/Home';
import VideoChat from './components/VideoChat';
import './App.css';

function App() {
  return (
    <Router>
      <div className="app">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/chat" element={<VideoChat />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;
---

##Create App.css and paste:
---
body {
  margin: 0;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  background-color: #121212;
  color: #e0e0e0;
}

.app {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

button {
  background-color: #8c52ff;
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 30px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
}

button:hover {
  background-color: #9d6eff;
  transform: translateY(-2px);
}

button:disabled {
  background-color: #4a4a4a;
  cursor: not-allowed;
}

input, select {
  background-color: #1e1e1e;
  border: 1px solid #333;
  color: white;
  padding: 12px;
  border-radius: 8px;
  font-size: 16px;
}

input:focus, select:focus {
  border-color: #8c52ff;
  outline: none;
}
---------------------------------------------------------------------------------------------

##📂 Create the components Folder
Inside /frontend/src, create a new folder called components.

##📄 Create Home.js (Landing Page)
Inside /frontend/src/components, create Home.js and paste:
---------------------------------------------------------------------------------------------
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Home.css';

const Home = () => {
  const [interests, setInterests] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [matchType, setMatchType] = useState('random');
  const navigate = useNavigate();

  const addInterest = () => {
    if (inputValue.trim() !== '' && !interests.includes(inputValue.trim())) {
      setInterests([...interests, inputValue.trim()]);
      setInputValue('');
    }
  };

  const removeInterest = (interest) => {
    setInterests(interests.filter(item => item !== interest));
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      addInterest();
    }
  };

  const startChat = () => {
    navigate('/chat', { 
      state: { 
        interests, 
        matchType 
      } 
    });
  };

  return (
    <div className="home-container">
      <div className="logo-container">
        <h1>OnlyUs</h1>
        <p>Connect with strangers through video and chat</p>
      </div>
      
      <div className="preferences-container">
        <h2>Choose Your Preferences</h2>
        
        <div className="match-type">
          <label>Match Type:</label>
          <div className="toggle-container">
            <button 
              className={matchType === 'random' ? 'active' : ''} 
              onClick={() => setMatchType('random')}
            >
              Random
            </button>
            <button 
              className={matchType === 'interests' ? 'active' : ''} 
              onClick={() => setMatchType('interests')}
            >
              By Interests
            </button>
          </div>
        </div>
        
        <div className="interests-section">
          <label>Add Interests:</label>
          <div className="input-group">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="e.g., music, english, telugu..."
              disabled={matchType === 'random'}
            />
            <button 
              onClick={addInterest}
              disabled={matchType === 'random'}
            >
              Add
            </button>
          </div>
          
          <div className="tags-container">
            {interests.map((interest, index) => (
              <div key={index} className="tag">
                {interest}
                <span onClick={() => removeInterest(interest)}>&times;</span>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      <button 
        className="start-button" 
        onClick={startChat}
      >
        GoOnlyUs
      </button>
    </div>
  );
};

export default Home;
---

##Create Home.css and paste:
---
.home-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 50px 20px;
  max-width: 800px;
  margin: 0 auto;
  height: 100vh;
}

.logo-container {
  text-align: center;
  margin-bottom: 50px;
}

.logo-container h1 {
  font-size: 48px;
  background: linear-gradient(90deg, #8c52ff, #c490ff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  margin-bottom: 10px;
}

.logo-container p {
  font-size: 18px;
  color: #a0a0a0;
}

.preferences-container {
  background-color: #1a1a1a;
  border-radius: 16px;
  padding: 30px;
  width: 100%;
  margin-bottom: 40px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
}

.preferences-container h2 {
  text-align: center;
  margin-bottom: 30px;
  color: #8c52ff;
}

.match-type, .interests-section {
  margin-bottom: 25px;
}

.match-type label, .interests-section label {
  display: block;
  margin-bottom: 10px;
  font-weight: 500;
}

.toggle-container {
  display: flex;
  gap: 15px;
}

.toggle-container button {
  flex: 1;
  background-color: #2a2a2a;
  color: #a0a0a0;
}

.toggle-container button.active {
  background-color: #8c52ff;
  color: white;
}

.input-group {
  display: flex;
  gap: 10px;
  margin-bottom: 15px;
}

.input-group input {
  flex-grow: 1;
}

.tags-container {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.tag {
  background-color: #8c52ff30;
  color: #c490ff;
  padding: 6px 12px;
  border-radius: 100px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.tag span {
  cursor: pointer;
  font-size: 18px;
  line-height: 1;
}

.start-button {
  font-size: 20px;
  padding: 15px 50px;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.05); }
  100% { transform: scale(1); }
}
---

##📄 Create VideoChat.js (Video Call Page)
Inside /components, create VideoChat.js and paste:
---
import React, { useState, useEffect, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import io from 'socket.io-client';
import './VideoChat.css';

const VideoChat = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { interests, matchType } = location.state || { interests: [], matchType: 'random' };
  
  const [connecting, setConnecting] = useState(true);
  const [connected, setConnected] = useState(false);
  const [permissionGranted, setPermissionGranted] = useState(false);
  const [messages, setMessages] = useState([]);
  const [currentMessage, setCurrentMessage] = useState('');
  
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const socketRef = useRef(null);
  const peerConnectionRef = useRef(null);
  const chatContainerRef = useRef(null);
  
  // Request camera permissions on component mount
  useEffect(() => {
    const requestPermissions = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ 
          video: true, 
          audio: true 
        });
        
        if (localVideoRef.current) {
          localVideoRef.current.srcObject = stream;
        }
        
        setPermissionGranted(true);
        
        // Connect to socket server
        socketRef.current = io('http://localhost:5000');
        
        // Setup socket event listeners
        setupSocketListeners();
        
        // Find a match
        findMatch();
        
        return stream;
      } catch (err) {
        console.error('Error accessing media devices:', err);
        alert('Failed to access camera and microphone. Please grant permissions.');
      }
    };
    
    const localStream = requestPermissions();
    
    // Cleanup on unmount
    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
      
      if (peerConnectionRef.current) {
        peerConnectionRef.current.close();
      }
      
      if (localStream) {
        localStream.then(stream => {
          stream.getTracks().forEach(track => track.stop());
        });
      }
    };
  }, []);
  
  // Scroll chat to bottom when new messages arrive
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);
  
  const setupSocketListeners = () => {
    const socket = socketRef.current;
    
    socket.on('matched', async (data) => {
      setConnecting(false);
      setConnected(true);
      
      // Setup WebRTC connection
      await setupPeerConnection();
      
      // Create and send offer
      createOffer();
    });
    
    socket.on('offer', async (offer) => {
      if (!peerConnectionRef.current) {
        await setupPeerConnection();
      }
      
      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(offer));
      
      // Create and send answer
      const answer = await peerConnectionRef.current.createAnswer();
      await peerConnectionRef.current.setLocalDescription(answer);
      
      socket.emit('answer', answer);
    });
    
    socket.on('answer', async (answer) => {
      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(answer));
    });
    
    socket.on('ice-candidate', async (candidate) => {
      if (peerConnectionRef.current) {
        await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(candidate));
      }
    });
    
    socket.on('chat-message', (message) => {
      setMessages(prevMessages => [...prevMessages, { text: message, sender: 'remote' }]);
    });
    
    socket.on('user-disconnected', () => {
      setConnected(false);
      setConnecting(true);
      setMessages([]);
      
      // Find a new match
      findMatch();
    });
  };
  
  const setupPeerConnection = async () => {
    // Setup WebRTC peer connection
    const configuration = {
      iceServers: [
        { urls: 'stun:stun.l.google.com:19302' }
      ]
    };
    
    const pc = new RTCPeerConnection(configuration);
    peerConnectionRef.current = pc;
    
    // Add local tracks to peer connection
    const localStream = localVideoRef.current.srcObject;
    localStream.getTracks().forEach(track => {
      pc.addTrack(track, localStream);
    });
    
    // Handle incoming remote tracks
    pc.ontrack = (event) => {
      if (remoteVideoRef.current) {
        remoteVideoRef.current.srcObject = event.streams[0];
      }
    };
    
    // Send ICE candidates to the other peer
    pc.onicecandidate = (event) => {
      if (event.candidate) {
        socketRef.current.emit('ice-candidate', event.candidate);
      }
    };
    
    return pc;
  };
  
  const createOffer = async () => {
    try {
      const offer = await peerConnectionRef.current.createOffer();
      await peerConnectionRef.current.setLocalDescription(offer);
      
      socketRef.current.emit('offer', offer);
    } catch (err) {
      console.error('Error creating offer:', err);
    }
  };
  
  const findMatch = () => {
    if (socketRef.current) {
      socketRef.current.emit('find-match', {
        matchType,
        interests
      });
    }
  };
  
  const sendMessage = () => {
    if (currentMessage.trim() !== '' && connected) {
      // Add message to local state
      setMessages(prevMessages => [...prevMessages, { text: currentMessage, sender: 'local' }]);
      
      // Send message to remote peer
      socketRef.current.emit('chat-message', currentMessage);
      
      // Clear input
      setCurrentMessage('');
    }
  };
  
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  };
  
  const nextMatch = () => {
    if (socketRef.current) {
      socketRef.current.emit('next-match');
      setConnected(false);
      setConnecting(true);
      setMessages([]);
    }
  };
  
  const goHome = () => {
    navigate('/');
  };
  
  return (
    <div className="video-chat-container">
      <div className="video-area">
        <div className="video-wrapper remote-video">
          {connecting ? (
            <div className="connecting-overlay">
              <div className="spinner"></div>
              <p>Looking for someone to chat with...</p>
              <p className="subtext">
                {matchType === 'interests' ? 
                  `Matching based on: ${interests.join(', ')}` : 
                  'Random matching enabled'}
              </p>
            </div>
          ) : null}
          
          <video 
            ref={remoteVideoRef} 
            autoPlay 
            playsInline
            className={connected ? 'visible' : ''}
          />
        </div>
        
        <div className="video-wrapper local-video">
          <video 
            ref={localVideoRef} 
            autoPlay 
            playsInline 
            muted
          />
        </div>
      </div>
      
      <div className="chat-area">
        <div className="chat-messages" ref={chatContainerRef}>
          {messages.length === 0 ? (
            <div className="no-messages">
              <p>No messages yet</p>
              <p className="subtext">Say hello to start the conversation!</p>
            </div>
          ) : (
            messages.map((message, index) => (
              <div 
                key={index} 
                className={`message ${message.sender === 'local' ? 'sent' : 'received'}`}
              >
                {message.text}
              </div>
            ))
          )}
        </div>
        
        <div className="chat-input">
          <input
            type="text"
            value={currentMessage}
            onChange={(e) => setCurrentMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Type a message..."
            disabled={!connected}
          />
          <button 
            onClick={sendMessage}
            disabled={!connected || currentMessage.trim() === ''}
          >
            Send
          </button>
        </div>
      </div>
      
      <div className="controls">
        <button className="next-button" onClick={nextMatch}>
          Next Person
        </button>
        <button className="home-button" onClick={goHome}>
          Exit
        </button>
      </div>
    </div>
  );
};

export default VideoChat;
---------------------------------------------------------------------------------------------

##Create VideoChat.css and paste:
---------------------------------------------------------------------------------------------
.video-chat-container {
  display: grid;
  grid-template-rows: 1fr auto;
  grid-template-columns: 1fr 350px;
  height: 100vh;
  background-color: #0a0a0a;
}

.video-area {
  grid-column: 1;
  grid-row: 1 / span 2;
  position: relative;
  background-color: #111;
  overflow: hidden;
}

.video-wrapper {
  position: relative;
}

.local-video {
  position: absolute;
  width: 25%;
  max-width: 200px;
  min-width: 120px;
  bottom: 20px;
  right: 20px;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  z-index: 10;
}

.remote-video {
  width: 100%;
  height: 100%;
}

video {
  width: 100%;
  height: 100%;
  object-fit: cover;
  background-color: #1a1a1a;
}

.connecting-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: rgba(10, 10, 10, 0.9);
  z-index: 5;
}

.spinner {
  width: 60px;
  height: 60px;
  border: 4px solid rgba(140, 82, 255, 0.2);
  border-radius: 50%;
  border-top-color: #8c52ff;
  animation: spin 1s ease-in-out infinite;
  margin-bottom: 20px;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.connecting-overlay p {
  color: white;
  font-size: 18px;
  margin-bottom: 10px;
}

.connecting-overlay .subtext {
  color: #a0a0a0;
  font-size: 14px;
  max-width: 80%;
  text-align: center;
}

.chat-area {
  grid-column: 2;
  grid-row: 1;
  display: flex;
  flex-direction: column;
  border-left: 1px solid #222;
  background-color: #121212;
}

.chat-messages {
  flex-grow: 1;
  padding: 15px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
}

.no-messages {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: #888;
  text-align: center;
}

.no-messages p {
  margin-bottom: 5px;
}

.no-messages .subtext {
  font-size: 14px;
  color: #666;
}

.message {
  max-width: 80%;
  padding: 10px 15px;
  border-radius: 18px;
  margin-bottom: 10px;
  word-break: break-word;
}

.message.sent {
  align-self: flex-end;
  background-color: #8c52ff;
  color: white;
  border-bottom-right-radius: 5px;
}

.message.received {
  align-self: flex-start;
  background-color: #333;
  color: white;
  border-bottom-left-radius: 5px;
}

.chat-input {
  display: flex;
  padding: 15px;
  border-top: 1px solid #222;
  background-color: #1a1a1a;
}

.chat-input input {
  flex-grow: 1;
  margin-right: 10px;
}

.controls {
  grid-column: 2;
  grid-row: 2;
  display: flex;
  padding: 15px;
  background-color: #1a1a1a;
  border-top: 1px solid #222;
  gap: 10px;
}

.next-button, .home-button {
  flex: 1;
}

.next-button {
  background-color: #8c52ff;
}

.home-button {
  background-color: #333;
}
---------------------------------------------------------------------------------------------


###Update index.js - Replace content with:
---------------------------------------------------------------------------------------------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
---------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
#Part 4: Running the Application

##1.Start the backend server
cd backend
npm run dev

##2.Start the frontend development server (in another terminal)
cd frontend
npm start

##3.Access the application

#Open your browser and navigate to http://localhost:3000
